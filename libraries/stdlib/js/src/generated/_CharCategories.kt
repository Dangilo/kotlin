/*
 * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package kotlin.text

//
// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateUnicodeData.kt
// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib
//

private class CategoryRangesWrapper {
    companion object {
        private const val toBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
        internal val fromBase64 = IntArray(128).apply { toBase64.forEachIndexed { index, char -> this[char.toInt()] = index } }

        internal val rangeStart = "AAAAIAAjACcAKwAuADEAOgA9AEAAQwBbAF4AYQB7AH4AgQCgAKMApgCqAK0AsACzALYAuQC9AMAA1wDaAN8A9wD6AQABOAFJAXkBfwGCAYcBiwGPAZIBmAGbAaMBpwGrAa8BswG4AbsBvgHBAcQBzgHdAfAB9QH4AjQCOgJAAkQCRwJQApQClwKwAsICxgLSAuAC5QLsAvADAANwA3QDdwN6A30DhAOHA4oDjgOTA6MDrAPPA9MD1gPaA/AD9AP5A/wD/wQwBGAEggSFBIgEiwTBBM8FMQVZBVwFYAWJBY0FkQW+BcEF0AXvBfMGAAYGBgkGDgYRBhsGHwYiBkAGQwZLBmAGagZuBnMG1AbXBt0G4AblBugG7AbvBvIG+gb9BwAHDwcSBzAHTQemB7EHwAfKB+sH9Af3B/oH/QgACBYIGggdCCQIJwgrCDAIQAhZCF4IYQigCLYI0wjiCOUJAwkGCToJPQlACUMJSQlNCVAJUwlYCWIJZQloCXAJcwmBCYUJjwmTCaoJsgm2CbwJvwnCCccJywnOCdcJ3AnhCeYJ8AnzCfYJ+gn9CgEKBQoPChMKKgoyCjgKPAo/CkIKRwpLClEKWQpeCmYKcApzCnYKgQqFCo8KkwqqCrIKtwq8Cr8KwgrHCssK0ArgCuMK5grwCvkK/AsBCwULDwsTCyoLMgs3CzwLQAtDC0cLSwtVC1wLYQtmC3ALcwuCC4ULjguSC5kLngujC6gLrgu+C8YLygvNC9AL1wvmC/AL8wv5DAAMAwwGDA4MEgwqDD0MQAxDDEYMSgxVDFgMYAxjDGYMdwx6DH8MggyFDI4MkgyqDLUMvAzADMYMygzNDNUM3gziDOYM8Q0ADQMNBg0ODRINOw0+DUENRg1KDU0NVA1XDVoNXw1iDWYNcA15DXwNgQ2FDZoNsw29DcENyg3PDdIN1g3ZDeYN8g4BDjEONQ4/DkIORg5JDk8OUg5aDoEOhg6MDqUOqQ6xDrUOvQ7BDsYOyQ7QDtwPAA8DDwYPEw8XDxsPIA8qDzQPOg8+D0EPSQ9xD38Pgg+FD4gPjQ+ZD74Pxg/JD84P0Q/VD9kQABArEC4QMRA0EDgQPBA/EEIQShBQEFYQWRBcEF8QYhBlEGgQbhBxEHUQghCGEIkQjRCQEJoQnRCgEMcQzRDQEPsQ/hEBEkoSUBJYElwSYBKKEpASshK4EsASxBLIEtgTEhMYE10TYBNpE4ATkBOgE/gUABQDFm0WcBaAFoMWmxagFusW7hbxFwAXDhcSFyAXMhc1F0AXUhdgF24XcheAF7QXuRe+F8YXyhfUF9cX2hfdF+AX8BgAGAYYCRgMGBAYIBhDGEYYgBiFGIgYqRiwGQAZIBkjGScZKhkwGTUZORlAGUQZRxlQGXAZgBmwGdAZ2hneGgAaFxoaGh4aIRpVGlkaYBpkGmcabRpzGn8aghqQGqAapxqqGrAavhsAGwQbBxs0GzgbOxs/G0IbRRtQG1obYRtrG3QbgBuDG6EbpBunG60bsBu6G+Yb6xvvG/Ib/BwAHCQcLBw0HDccOxxAHE0cUBxaHHgcfhyBHJAcvRzAHNAc0xzWHOEc5BzpHO0c8Bz0HPcc+h0AHSwdax14HXsdmx3AHfseAB6WHp4fAB8IHxAfGB8gHygfMB84H0AfSB9QH1kfXR9gH2gfcB+AH4gfkB+YH6AfqB+wH7YfuR+8H78fwh/GH8kfzB/PH9If1h/ZH90f4B/oH+0f8h/2H/kf/CAAIAsgECAWIBkgHCAgICggKyAvIDIgOSA8ID8gQiBFIEggUiBVIF8gYiBmIHAgdCB6IH0ggCCKII0gkCCgINAg3SDhIOQg5yEAIQUhCiENIREhFCEYIRshHiEkISshLiExITQhNyE6IT0hQCFFIUghSyFOIVEhYCGDIYYhiSGQIZUhmiGdIaAhqSGuIbEhziHRIdYh9CMAIwgjDCMgIyMjKSMsI3wjfyObI7Qj3CPiJEAkYCScJOolACW3JbolwSXEJfgmACZvJnInaCd2J5QnwCfFJ8gn5ifwKAApACmDKZkp2CncKfwp/ysAKzArRStIK00rdiuXLAAsMCxgLGQsaSxuLHEseCx8LH8sgyzkLOcs6yzvLPIs+Sz9LQAtJy0tLTAtby1/LYItoC2oLbAtuC3ALcgt0C3YLeAuAC4DLgYuCS4PLhcuHC4fLiIuKi4vLjIuOi49LkAuQy5QLoAumy8AL/AwADADMAYwCTASMBUwHDAfMCIwKjAuMDEwNjA5MDwwPzBCMJkwnDCfMKMw+zD+MQUxMTGQMZMxljGgMcAx8DIAMiAyKjJIMlAyUzJgMoAyijKxMsA0AE3ATgCgAKAVoBikkKTQpPik/qUBpgymD6YSpiCmKqZApm6mcaZ0pn6mgaacpp+moqbmpvCm86cApxenIKcjpzCnNKdwp3Onead+p4ini6ePp5Knlaerp6+nsqe1p8KnxqfKp/Wn+Kf7qAKoBagJqA6oI6gmqCmoLKgwqDaoQKh0qICog6i0qMSozqjRqOCo8qj4qPuo/6kCqQqpJqkuqTGpR6lSqV+pYqmAqYOphqmzqbepuqm9qcCpw6nPqdKp3qnhqeWp6KnwqfqqAKopqi+qMqo2qkCqQ6pGqkyqUKpcqmCqcKpzqneqeqp9qoCqsKq0qriqu6q+qsKq26requGq66rvqvKq9asBqwmrEasgqyirMKtbq16rYatpq3CrwKvjq+ur8KwA17DXy9gA24DcAOAA+QD6cPsA+xP7Hfsh+yn7LPs4+z77Q/tI+7L70/0+/VD9kv3w/fz+AP4Q/hf+IP4w/jP+Nv5F/kj+S/5O/lH+Vv5Z/l/+Yv5m/mn+cP52/v//Av8H/wv/Dv8R/xr/Hf8g/yP/O/8+/0H/W/9e/2H/Zf9o/3D/c/+e/6H/wv/K/9L/2v/g/+P/5v/p/+3/+f/8"

        internal val rangeEnd = "AB8AIgAmACoALQAwADkAPAA/AEIAWgBdAGAAegB9AIAAnwCiAKUAqQCsAK8AsgC1ALgAvAC/ANYA2QDeAPYA+QD/ATcBSAF4AX4BgQGGAYoBjgGRAZcBmgGiAaYBqgGuAbIBtwG6Ab0BwAHDAc0B3AHvAfQB9wIzAjkCPwJDAkYCTwKTApYCrwLBAsUC0QLfAuQC6wLvAv8DbwNzA3YDdwN8A38DhgOJA4wDkgOhA6sDzgPSA9UD2QPvA/MD+AP7A/4ELwRfBIEEhASHBIoEwATOBS8FVgVbBV8FiAWKBY8FvQXABccF6gXyBfQGBQYIBg0GEAYaBh4GIQY/BkIGSgZfBmkGbQZyBtMG1gbcBt8G5AbnBusG7gbxBvkG/Ab/Bw0HEQcvB0oHpQewB7EHyQfqB/MH9gf5B/oH/wgVCBkIHAgjCCYIKggtCD4IWAhbCGAIagi0CMcI4QjkCQIJBQk5CTwJPwlCCUgJTAlPCVIJVwlhCWQJZwlvCXIJgAmDCYwJkAmoCbAJsgm5Cb4JwQnECcgJzQnOCdcJ4AnjCe8J8gn1CfkJ/An+CgMKCgoQCigKMAo2CjkKPgpBCkIKSApNClEKXApeCm8Kcgp1CnYKgwqNCpEKqAqwCrYKuQq+CsEKxQrJCs0K0AriCuMK7wrxCvsK/wsDCwwLEAsoCzALNgs5Cz8LQgtEC0gLTQtXC2ALYwtvC3ILdwuDC4oLkAuVC5wLnwukC6oLuQvCC8gLzAvNC9AL1wvvC/IL+Av6DAIMBQwMDBAMKAw5DD8MQgxEDEgMTQxWDFoMYgxjDG8MeQx+DIEMhAyMDJAMqAyzDLkMvwzEDMgMzAzNDNYM4QzjDO8M8g0CDQUNDA0QDToNPQ1ADUQNSA1MDU8NVg1ZDV4NYQ1jDW8NeA17DX8Ngw2WDbENuw3ADcYNyg3RDdQN2A3fDe8N9A4wDjQOOg5BDkUOSA5ODlEOWQ5bDoQOig6jDqgOsA60DrwOwA7EDsgOzQ7ZDt8PAg8FDxIPFg8aDx8PKQ8zDzkPPQ9AD0cPbA9+D4EPhA+HD4wPlw+8D8UPyA/MD9AP1A/YD9oQKhAtEDAQMxA3EDsQPhBBEEkQTxBVEFgQWxBeEGEQZBBnEG0QcBB0EIEQhRCIEIwQjxCZEJwQnxDFEMcQzRD6EP0RABJIEk0SVhJbEl0SiBKNErAStRK+EsMSxRLWExATFRNaE18TaBN8E48TmRP1E/0UAhZsFm8WfxaCFpoWnBbqFu0W8Bb4FwwXERcUFzEXNBc2F1EXUxdsF3AXcxezF7gXvRfFF8kX0xfWF9kX3BfdF+kX+RgFGAgYCxgOGBkYQhhFGHgYhBiHGKgYqhj1GR4ZIhkmGSkZKxk0GTgZOxlAGUYZTxltGXQZqxnJGdkZ2hn/GhYaGRobGiAaVBpYGl4aYxpmGmwachp8GoEaiRqZGqYaqRqtGr0awBsDGwYbMxs3GzobPhtBG0QbSxtZG2AbahtzG3wbghugG6MbphusG68buRvlG+ob7hvxG/Mb/xwjHCscMxw2HDccPxxJHE8cWRx3HH0cgByIHLocvxzHHNIc1RzgHOMc6BzsHO8c8xz2HPkc+h0rHWoddx16HZodvx35Hf8elR6dHv8fBx8PHxUfHR8nHy8fNx8/H0UfTR9XH1sfXx9nH28ffR+HH48flx+fH6cfrx+0H7gfux++H8EfxB/IH8sfzh/RH9Mf2B/bH98f5x/sH+8f9B/4H/sf/iAKIA8gFSAYIBsgHyAnICogLiAxIDggOyA+IEEgRCBHIFEgVCBeIGEgZCBvIHEgeSB8IH8giSCMII4gnCC/INwg4CDjIOYg8CEEIQkhDCEQIRMhFyEaIR0hIyEqIS0hMCEzITYhOSE8IT8hRCFHIUohTSFQIV8hgiGFIYghiyGUIZkhnCGfIaghrSGwIc0h0CHVIfMi/yMHIwsjHyMiIygjKyN7I34jmiOzI9sj4SQmJEokmyTpJP8ltiW5JcAlwyX3Jf8mbiZxJ2cndSeTJ78nxCfHJ+Un7yf/KP8pgimYKdcp2yn7Kf4q/ysvK0QrRytMK3MrlSv/LC4sXixjLGgsbSxwLHcseyx+LIIs4yzmLOos7izxLPMs/Cz/LSUtJy0tLWctcC2BLZYtpi2uLbYtvi3GLc4t1i3eLf8uAi4FLgguDi4WLhsuHi4hLikuLi4xLjkuPC4/LkIuTy5SLpku8y/VL/swAjAFMAgwETAUMBswHjAhMCkwLTAwMDUwODA7MD4wQTCWMJswnjCiMPow/TD/MS8xjjGSMZUxnzG/MeMx/zIeMikyRzJPMlIyXzJ/MokysDK/M/9Nv03/n/ygFKAXpIykxqT3pP2lAKYLpg6mEaYfpimmK6ZtpnCmc6Z9poCmm6aepqGm5abvpvKm96cWpx+nIqcvpzOnb6dyp3infaeHp4qnjqeRp5Snqqeup7GntKe/p8WnyafKp/en+qgBqASoCKgNqCKoJagoqCuoLKg1qDmoc6h3qIKos6jDqMWo0KjZqPGo96j6qP6pAakJqSWpLakwqUapUalTqWGpfKmCqYWpsqm2qbmpvKm/qcKpzanRqdmp4Knkqeep76n5qf6qKKouqjGqNao2qkKqRapLqk2qWapfqm+qcqp2qnmqfKp/qq+qs6q3qrqqvarBqsKq3argquqq7qrxqvSq9qsGqw6rFqsmqy6rWqtdq2CraKtrq7+r4qvqq+2r+dej18bX+9t/2//f//j/+m362fsG+xf7IPso+yv7Nvs8+0H7R/ux+8H9Pf0//Y/9x/37/f3+D/4W/hn+L/4y/jX+RP5H/kr+Tf5Q/lX+WP5e/mH+Zf5o/mv+dP78/wH/Bv8K/w3/EP8Z/xz/H/8i/zr/Pf9A/1r/Xf9g/2T/Z/9v/3L/nf+g/77/x//P/9f/3P/i/+X/6P/s/+7/+//9"

        internal val categoryOfRange = "AA8zGGMaWrhjNGMJAAljGWc4BwEAAWK2AvsAAls1PfkAD2GaABpjmxc9Q3xxeSxbY3gvxWFrAAFkIQABAAILIgACAEEAIgBBACIIIgBBCCEEQgABBCIIQQQiAEEAIgBBBCIAIgRCFEEIogAFBEMAIgBBBEMEIgBBAAIIIQAiAAEAQQACCEUAAgAEABsABAAbAAQAGwNkABsABgBBEDsAAhBCCDgHewQ4AiEEIgABAAEAAghBBCIIQQBBAAIIOQghBCIAAQACAEFwxgAGHCcAQQAiAEEAAWCYABgAAgMUc1wABmDUYMYABQAFABgAEAAZaxhw3AAGRhgXBQAFFIUABQAGAAkAGBTFAAVgxQAGQNwABhCGcMYYphUpAAkABXOFABgWBgAFAAYABQAGAAUACQAFAAYThAAYAAQbWgAFAAYYhgAGEMYYxAAGABgABQAGFjgABQAFAAUABhjQAAYUqAAFAQYgqBkGAAYACBkIFMYABgAFGwZhKQAJEwUABSEGAAUABQAFAAUABQAFGQUgyAAGAAggyAAFAAgUsRjFAAlopS16AAtrhQMGGQYABQAFAAUABUSlAAVEyCEGAAYABgAGAAYABQAFAAkYphTFABgYyAAFAAUABQAFFiUABSCmGQgABhkGGQgABRilAAYACQNYGKYABiEGAAUABQAFAAUUsQAFGQUYyAAGAAggyCDGFLEYxQAJLLwACwCmAAUABQAFFiUABQAFAAUABRkIAAgACAAGAAUACAAJAAsAHANcIQYUyAAFAAUABQAFGKYgyAAIAAYABgAGAAUYpQAGAAlhawALF4YhGAAFAAUABQAFAAUZBQAIIQYhBgAGAAgWJQAGAAkABRjIFQUABQAFAAUUxgAIAAYACAAIcKYABS0LAAsABQAGAAkAC3ClAAUgyAAFAAUABUSxAAUABgAIAAYZEQAIAAlhCAAFFKYABmilAAUYxAAGJTgACQAYFiUABQAFFLEABRilAAYWMQAFENEABgAJAAVzhWMcABhjnHDGABwACQALANwC1SCoAAUABQAGGQYABhsGAAUABgAGABxzhgAccxwAGAAcABgABSDIAAYgxgAGGMgZBiSpAAkAGAAFGQgUphilFMYACCClAAgABQAGAAUZCCEGAAgUyAAJAAgbnAABAAEAAQACCJgUQgAFAAUABUSlAAUABQAFAAUABQAFFiUABQAFAAUABQAFAAYAGAALAAUAHAABAAJQpQAFcLgABRSsAAUCtgAFABgACgAFAAUABQAGAAUABgAYAAUABgAFAAUABgAFGQYABgAIGQgABgAYYJhrBQAGAAkACwAYYxQbGEDGAAkABRSFAAUABRjFAAUAxQAFAAUABgAIGMgACCEGAAgABgAcJxgACQAFAAUABQAFAAkACwAcAAUYyADIYLgABQEGAAYBBhjIAAYACAAGJSYACQAJABhgmAAYAAYYxwAGFQUABSDGAAYhBgAIIQYABQAJABgAHAAGABwZBgAFIMYZBiDGGKUACQAFGMghBgAGAAgAGAAFAAgABiDIAAYAGAAJAAUACQAFAARjAgACAAEAAQAYAAZgxgAGGQYABgAFFMUABRilIMYABQACAAQAAhBCAAIABAAGAAYAQQACAEEAAgABAAIAAQACAAEAAgABAAIAAQACADEAMQACAAEAAgACAAMAAgADAAIAAwACBEIAAQtjABsAAghBAAFsewtiAAIIIgABABsAAgABABsAAghBAAFsewAMABAAFHcYdr5X3QAYQc0AEGGYABh3HgAYXxdjOFcWABhfGQAYQZAAEAAQAIsACwAZWqQACwAZArYABAAaAAYABxjnHMYABgeccDwEQQgiBEFzgQQ5AAEAHAOBAAELgQABFEUUonOCBEEAGQhBcEJzmS+CAAsACgVCAAovnAAZABxnPAAcczwAHHOZABxnmQOZABwAGQAcAtUAHGc8ABxavAAcc5kAHAAZABwAGQAcABwACwAcAAsAHHM8ABxnnAAcABkAHGecABwC1QALABwAGVc2ABkC1QAZABwAGQK2ABkC1QAZVzYAGQAcABlzmQAZABwAHAAcAAEAAgQiCEEAIgABBEIAAgSECCEAQQucABwAIgAGAEEAGGMLAAIAAgACAAUAmBTFAAUABQAFAAUABQAFAAUABQAFAAZjHQPdABh7uAAYYxR3HmPdAtUAGGMEABhTFAAYUrgAGGOcABwAHAAcABxjDBOYVUUC1VecAtVWlnLKAAoABiEUAAQrnBFKcwUWPAAFbMYQmxaFAAVghACkAAUABXOLAAsAHAAFABwABQAcAAsAHAALL4sACwAcAAsAHAALABwABQAcAAUABRSFAAUAHAAFAARjBQAFYJgXBQAFAAkABQBBHMVg5wAGEwEAQRCGFMUABQAKGNgAGAAbAARvYQBBCCIAQQhEAAIAIgBBb2QAIgSiCCIAQQABBCIAAQBBCCEEQQACCCUQggAFGKUUphilAAUgyBuIABwABgALa5wABQAYIKgABQAIAAZhOAAJAAYABQAYFLglJgAJAAUABmC4AAUABgAIFLgABQAGFKgABSEGAAYhBiDIYRgAGCSJAAljBQAFGKQABQAJAAUABQAGIQYgyAAGAAUUpgAFAQYACQAYAAUUpAAFABwgphUFAAUUxhilFKYABRTGAAUUhWC4AAUYyGEYEKQBBgAFAAUABQAFAAUAAhNkEIIAAm9kAAIABSDIIwYACQAFAAUABQATABMAEwASAAUABQACAAIYpQAFFyUABQAFRKVEpQAFABsABQK2AAUABQAFA5oABgAYWrgABmKUXrcCtmK4Wxhi+F8XYjhjFAK2ABhTOWcRaxgABQAFQxFjWFcWZphhOAAJYzhnGWAhAAFW2AL7AAJmtlc2VxZgpQAFFIUABRCkAAUABQAFAAUABWs6b1xrkQAZABwAEAAc"
    }
}

private fun binarySearchRange(rangeStart: String, needle: Int): Int {
    var bottom = 0
    var top = 1104 - 1
    var middle = -1
    var value = 0
    while (bottom <= top) {
        middle = (bottom + top) / 2
        value = intFromBase64(rangeStart, middle)
        if (needle > value)
            bottom = middle + 1
        else if (needle == value)
            return middle
        else
            top = middle - 1
    }
    return middle - (if (needle < value) 1 else 0)
}

private fun intFromBase64(string: String, index: Int): Int {
    val fromBase64 = CategoryRangesWrapper.fromBase64
    val stringIndex = (index / 3) * 8
    return when (index % 3) {
        0 -> (fromBase64[string[stringIndex].toInt()] shl 10) or
                (fromBase64[string[stringIndex + 1].toInt()] shl 4) or
                (fromBase64[string[stringIndex + 2].toInt()] shr 2)

        1 -> ((fromBase64[string[stringIndex + 2].toInt()] and 0b11) shl 14) or
                (fromBase64[string[stringIndex + 3].toInt()] shl 8) or
                (fromBase64[string[stringIndex + 4].toInt()] shl 2) or
                (fromBase64[string[stringIndex + 5].toInt()] shr 4)

        2 -> ((fromBase64[string[stringIndex + 5].toInt()] and 0b1111) shl 12) or
                (fromBase64[string[stringIndex + 6].toInt()] shl 6) or
                (fromBase64[string[stringIndex + 7].toInt()])

        else -> error("Unreachable")
    }
}

/**
 * Returns the Unicode general category of this character as an Int.
 */
internal fun Char.getCategoryValue(): Int {
    val ch = this.toInt()
    val index = binarySearchRange(CategoryRangesWrapper.rangeStart, ch)
    val high = intFromBase64(CategoryRangesWrapper.rangeEnd, index)
    var value = CharCategory.UNASSIGNED.value
    if (ch <= high) {
        val code = intFromBase64(CategoryRangesWrapper.categoryOfRange, index)
        value = when {
            code < 0x20 -> code
            code < 0x400 -> if ((ch and 1) == 1) code shr 5 else code and 0x1f
            else ->
                when (ch % 3) {
                    2 -> code shr 10
                    1 -> (code shr 5) and 0x1f
                    else -> code and 0x1f
                }
        }
    }
    return if (value == 17) CharCategory.UNASSIGNED.value else value
}
