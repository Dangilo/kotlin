/*
 * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package kotlin.text

//
// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateUnicodeData.kt
// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib
//

private class CategoryRangesWrapper {
    companion object {
        private const val toBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
        internal val fromBase64 = IntArray(128).apply { toBase64.forEachIndexed { index, char -> this[char.toInt()] = index } }

        internal val rangeStart = "AAAAIAAiACQAJgAoACoALQAvADEAOgA8AD8AQQBbAF0AXwBhAHsAfQB/AKAAogCmAKgAqgCsAK4AsQCzALUAtwC5ALsAvQC/AMEA1wDZAN8A9wD5AQABOAFJAXkBfwGBAYMBhwGKAYwBjgGSAZQBlwGZAZwBngGgAacBqwGvAbIBtAG4AboBvAG+AcABxAHGAcgBygHMAd0B8AHyAfQB9wH5AjQCOgI8Aj4CQAJEAkcCUAKUApYCsALCAsYC0gLgAuUC7ALwAwADcAN0A3YDegN8A34DhAOGA4kDjAOOA5ADkgOjA6wDzwPRA9MD1QPYA/AD9AP2A/gD+gP8A/4EMARgBIIEhASIBIoEwQTPBTEFWQVbBWAFiQWNBY8FkQW+BcAFwgXFBdAF7wXzBgAGBgYJBgsGDQYPBhEGGwYeBiAGQAZCBksGYAZqBm4GcAZyBtQG1gbdBt8G5QbnBukG6wbuBvAG+gb9Bv8HAQcPBxEHEwcwB00HpgexB8AHygfrB/QH9gf4B/oH/Qf/CAEIFggaCBwIJAgmCCgIKggwCEAIWQheCGAIoAi2CNMI4gjkCQMJBQk6CT0JPwlBCUkJTQlPCVEJWAliCWQJZglwCXIJgQmDCYUJjwmTCaoJsgm2CbwJvgnBCccJywnNCdcJ3AnfCeIJ5gnwCfIJ9An6CfwJ/goBCgMKBQoPChMKKgoyCjUKOAo8Cj4KQQpHCksKUQpZCl4KZgpwCnIKdQqBCoMKhQqPCpMKqgqyCrUKvAq+CsEKxwrJCssKzQrQCuAK4grmCvAK+Qr7CwELAwsFCw8LEwsqCzILNQs8Cz4LQgtHC0sLTQtVC1cLXAtfC2ILZgtwC3ILgguFC44LkguZC5wLngujC6gLrgu+C8ALwgvGC8oLzQvQC9cL5gvwC/ML+QwADAIMBAwGDA4MEgwqDD0MPwxBDEYMSgxVDFgMYAxiDGYMdwx5DH8MgQyDDIUMjgySDKoMtQy8DL4MwQzGDMgMygzMDNUM3gzgDOIM5gzxDQANAg0EDQ4NEg07DT0NPw1BDUYNSg1NDU8NVA1XDVkNXw1iDWYNcA15DXsNgQ2DDYUNmg2zDb0NwA3KDc8N0g3WDdgN5g3yDfQOAQ4xDjMONQ4/DkEORg5IDk8OUQ5aDoEOhA6GDowOpQ6nDrEOsw61Dr0OwA7GDsgO0A7cDwAPAg8E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"

        internal val rangeEnd = "AB8AIQAjACUAJwApACwALgAwADkAOwA+AEAAWgBcAF4AYAB6AHwAfgCfAKEApQCnAKkAqwCtALAAsgC0ALYAuAC6ALwAvgDAANYA2ADeAPYA+AD/ATcBSAF4AX4BgAGCAYYBiQGLAY0BkQGTAZYBmAGbAZ0BnwGmAaoBrgGxAbMBtwG5AbsBvQG/AcMBxQHHAckBywHcAe8B8QHzAfYB+AIzAjkCOwI9Aj8CQwJGAk8CkwKVAq8CwQLFAtEC3wLkAusC7wL/A28DcwN1A3cDewN9A38DhQOIA4oDjAOPA5EDoQOrA84D0APSA9QD1wPvA/MD9QP3A/kD+wP9BC8EXwSBBIMEhwSJBMAEzgUvBVYFWgVfBYgFigWOBY8FvQW/BcEFxAXHBeoF8gX0BgUGCAYKBgwGDgYQBhoGHAYfBj8GQQZKBl8GaQZtBm8GcQbTBtUG3AbeBuQG5gboBuoG7QbvBvkG/Ab+BwAHDQcQBxIHLwdKB6UHsAexB8kH6gfzB/UH9wf5B/oH/ggACBUIGQgbCCMIJQgnCCkILQg+CFgIWwheCGoItAjHCOEI4wkCCQQJOQk8CT4JQAlICUwJTglQCVcJYQljCWUJbwlxCYAJggmDCYwJkAmoCbAJsgm5Cb0JwAnECcgJzAnOCdcJ3QnhCeMJ7wnxCfMJ+Qn7Cf0J/goCCgMKCgoQCigKMAozCjYKOQo8CkAKQgpICk0KUQpcCl4KbwpxCnQKdgqCCoMKjQqRCqgKsAqzCrkKvQrACsUKyArJCswKzQrQCuEK4wrvCvEK+gr/CwILAwsMCxALKAswCzMLOQs9C0ELRAtIC0wLTQtWC1cLXQthC2MLbwtxC3cLgwuKC5ALlQuaC5wLnwukC6oLuQu/C8ELwgvIC8wLzQvQC9cL7wvyC/gL+gwBDAMMBQwMDBAMKAw5DD4MQAxEDEgMTQxWDFoMYQxjDG8MeAx+DIAMggyEDIwMkAyoDLMMuQy9DMAMxAzHDMgMywzNDNYM3gzhDOMM7wzyDQENAw0MDRANOg08DT4NQA1EDUgNTA1ODU8NVg1YDV4NYQ1jDW8NeA16DX8Ngg2DDZYNsQ27Db0Nxg3KDdEN1A3WDd8N7w3zDfQOMA4yDjQOOg5ADkUORw5ODlAOWQ5bDoIOhA6KDqMOpQ6wDrIOtA68Dr0OxA7GDs0O2Q7fDwEPAw8S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"

        internal val categoryOfRange = "AA8YDAAYGBoAGBYVGRgUGBgJAAkAGAAZABgAARUYFhsXGwACFRkWGQAPGAwAGhgcHBsdBRAZGxwZCwsbAhgYGwsFHgsACxgBAAEZAQABAAIZAgACAgEBAgIBAQIAAgABAgEBAgABAAIAAQECAgEAAQACAAEBAgIBAQICAQECAAEBAgIBBQICAQACAAUDAQECAgMDAQECAgEBAgIDAgEAAQIBAAIAAQECAgEBAgABAgEAAgIFAAIABAAbAAQAGwAEABsbBAAbAAYCARsEAgECBAACARgAGxgBAAEAAQABAQIAAQABAAIBAgIBAAEAAgIBAAICAQEZAQICAQECAAEAAgIBBhwABgAHAgEBAgIBAAEEGAAYAAIYFAAcABoABgYUBhgYBgYYAAUABQAYABAAGQAYGhgYHBwGAAYYEAAYAAUFBAAFAAYACQAYAAUFBgAFBRgABhAcAAYABAAGHAYABgAFAAkABQAcBRgAGBAFBgUABQAGAAUABgAFAAkABQAGAAQYHAAYAAQGGhoFAAUABgYEAAYGBAAGBgQABgAYAAUABgAYAAUABQAFAAYGEAAGCAUABQgGBQgACAAGAAgGCAgFAAYABQAGABgACQQYAAUGCAAIAAUABQAFAAUABQAFBQYACAAGAAgACAYFAAgABQAFAAYACQAFABoACxocGAUABgAGAAgABQAFAAUABQAFAAUABQAGAAgABgAGAAYABgAFAAUACQAGAAUGGAAGAAgABQAFAAUABQAFAAUFBgAIAAYABgAIAAgABgAFAAUABgAJGhgFBgAGBggACAAFAAUABQAFAAUABQUGBggABgAIAAgABgAGAAgABQAFAAYACQUcAAsFBgAFAAUABQAFAAUABQAFAAUABQAICAYACAAIAAgABgAFAAgACQALABwaHAgGAAgFBgAFAAUABQAFBQYABgAIAAYABgAGAAUABQAGAAkYCwALHAUGCAgYAAUABQAFAAUABQUGBggACAgGAAgACAAGAAgABQAFAAYACQAFAAYACAAFAAUABQAGBQgACAAGAAgACAYFABwABQgLAAsABQAGAAkACxwFAAUGCAAIAAUABQAFAAUABQAGAAgABgAGAAgACQAIABgABQYFBQYABhoFAAUGBAAGGAkACQAYAAUABQAFAAUABQAFBgUFBgAGAAUABQAEAAYACQAFHAUAHAAYHBgAHAAGABwACQALBhwWFQAIAAUABQAGCAYABhgGBgUABQAGAAYAHBwGABwAHAAYABwAGAAFAAgABggGAAYGCAgGBggFBgAJABgABQAIAAYABQAGBQgACAAFAAgABQAGAAUIBgYICAYACAYFCAkACQAIBhwcAQABAAEAAQACGAQAAgAFAAUABQAFAAUABQAFAAUABQAFAAUABQAFAAUABQAFAAYAGAALAAUAHAABAAIFFAAFHBgABQUMAAUVFgAFABgACgAFAAUABQAGAAUABgAYAAUABgAFAAUABgAFAAYGCAAGAAgIBgYIAAYAGAQYABgaBQAGAAkACwAYGBQAGAAGABAACQAFBAUABQAFAAYABQYFAAUABQAGAAgABgAIAAgIBgAIAAYAHAAYAAkABQAFAAUABQAJAAsAHAAFAAYACAAGABgABQgGAAYIBgYIAAYACAAGBgkACQAJABgEGAAYAAYGBwAGAAYFCAAFCAYABggGAAgIBgUIAAUACQAYABwABgAcAAYFCAAFCAYABgAIAAYGCAAGAAUACQAFCAYGCAAIBggABgAIABgABQAIAAYACAAGABgACQAFAAkABQAEABgAAgABAAEAGAAGGAYABggGAAYABQYFAAUFBggFAAYABQACAAQAAgIEAAIABAAGAAYCAQACAgEAAgABAAIAAQACAAEAAgABAAIAAQACAAEAAQABAQIAAgABAAIAAgADAAIAAwACAAMAAgACAAEbAxsCABsAAgACAAEbAwAbAAIAAgABABsAAgABABsAAgACAAEbAwAbAAwAEAAUABgeHR0VHh0dFQAYDg0AEAwYABgdHgAYABcAGBUZGBYAGBgZGBcAGAwQABAAEAQLAAsAGRUWBAsACwAZFRYABAAaAAYABwYHAAcABgAcHAEAHAEcHAIAAQACAAECHAEcHBkAAQAcHAEAAQIcAAEFAgAFAhwcAgIBARkAGQECAAIZHBwCAAsACgECAAoLHAAcABkAHAAZABwcGRkcHBkAHBwZABwAGQAcHBkAHAAZABwWFQAcABkAHBUWABwcGQAcABkAHAAZABwAHAALABwACwAcGRwAHBkcABwAGQAcGRwAHBYVAAsAHAAZFRYAGRYVABkAHAAZFRYAGRYVABkWFQAZABwAGQAcABkAHAAcABwAAQACAgEAAQACAQIAAQIBAQIAAgAEAAECARwCABwBAgAGAgEAGAsYGAIAAgACAAIABQQYBgUABQAFAAUABQAFAAUABQAFAAUABgAYHh0AGB0eGB0eGAAYFBgYFB4dABgeHRYVABgEGAAYABQAGBgUGBUAGAAcABgAHAAcABwAHBgMABgEHAoFFhUAHBYVFRQAFgocAAoABgAIBBQABAAcAAoEBRgcABwABQAGABsABAUUAAUYBAAEAAUABQAFABwACwAcAAUAHAAFABwACwAcAAsLHAALABwACwAcAAsAHAAFABwABQAFBAUABQAcAAUABAAYAAUYBAAYAAUACQAFAgEGBQAHGAYABgQYAgEABAAGAAUACgAGABgAGwAEABsCAQACAgECBAACAQICARsEARsBAgUBAgEAAgIBAAECAQABAgECAQABAQIBAgUEBAIABQUGAAUFBgAFBgUABQAIAAYIHAAcAAYACwAcHBoABQAYAAgABQAIAAYAGAAJAAYABQAYBRgGBQAJAAUABgAYAAUABgAIGAUABQAGCAUABQYICAYABgAIAAYACAAYBAkACQAYAAUGBAAFAAkABQAFAAYACAAGAAgABgAFBgUABQgGAAkAGAAFBQQABQAcCAUIBgAFBQYABgAFAAYABQAGBgUABQQYGAUABQgGBggIGBgFAAQIBgAFAAUABQAFAAUAAhsEAAQAAgQbABsAAgAFAAgGCAgGGAgABgAJAAUABQAFABMAEwATABIABQAFAAIAAgUGAAUZBQAFAAUABQAFAAUABQAbAAUVFgAFAAUABRwaAAYAGBUWABgABhQYFxQVFxUWABgVFgAYABcAGAAYFRQVFgAYFBkAGRoYABgABQAFABAAGBgaABgWFRkYFBgYCQAJABgAGQAYAAEVGBYbFxsAAhUZFhkVFhgVFhgYBQAFBQQABQAEAAUABQAFAAUABQAaGxkaHAAaGRwAGQAcABAAHA=="
    }
}

private fun binarySearchRange(rangeStart: String, needle: Int): Int {
    var bottom = 0
    var top = 1259 - 1
    var middle = -1
    var value = 0
    while (bottom <= top) {
        middle = (bottom + top) / 2
        value = intFromBase64(rangeStart, middle)
        if (needle > value)
            bottom = middle + 1
        else if (needle == value)
            return middle
        else
            top = middle - 1
    }
    return middle - (if (needle < value) 1 else 0)
}

private fun intFromBase64(string: String, index: Int): Int {
    val fromBase64 = CategoryRangesWrapper.fromBase64
    val stringIndex = (index / 3) * 8
    return when (index % 3) {
        0 -> (fromBase64[string[stringIndex].toInt()] shl 10) or
                (fromBase64[string[stringIndex + 1].toInt()] shl 4) or
                (fromBase64[string[stringIndex + 2].toInt()] shr 2)

        1 -> ((fromBase64[string[stringIndex + 2].toInt()] and 0b11) shl 14) or
                (fromBase64[string[stringIndex + 3].toInt()] shl 8) or
                (fromBase64[string[stringIndex + 4].toInt()] shl 2) or
                (fromBase64[string[stringIndex + 5].toInt()] shr 4)

        2 -> ((fromBase64[string[stringIndex + 5].toInt()] and 0b1111) shl 12) or
                (fromBase64[string[stringIndex + 6].toInt()] shl 6) or
                (fromBase64[string[stringIndex + 7].toInt()])

        else -> error("Unreachable")
    }
}

/**
 * Returns the Unicode general category of this character as an Int.
 */
internal fun Char.getCategoryValue(): Int {
    val ch = this.toInt()
    val index = binarySearchRange(CategoryRangesWrapper.rangeStart, ch)
    val high = intFromBase64(CategoryRangesWrapper.rangeEnd, index)
    if (ch <= high) {
        val code = intFromBase64(CategoryRangesWrapper.categoryOfRange, index)
        if (code < 0x100) {
            return code
        }
        return if ((ch and 1) == 1) code shr 8 else code and 0xff
    }
    return CharCategory.UNASSIGNED.value
}
