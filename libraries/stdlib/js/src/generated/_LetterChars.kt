/*
 * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package kotlin.text

//
// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateUnicodeData.kt
// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib
//

private object Letter {
    // rangeStart.size = 165
    internal val rangeStart = intArrayOf(
        0x0041, 0x00aa, 0x00c9, 0x00f8, 0x02c6, 0x02ec, 0x0370, 0x038f, 0x03f7, 0x048a, 0x0531, 0x0560, 0x05ef, 0x066e, 0x06d5, 0x06fa, 0x0719, 0x07b1, 0x07f4, 0x0813, 
        0x0840, 0x08a0, 0x0904, 0x0950, 0x0971, 0x0990, 0x09af, 0x09ce, 0x09f0, 0x0a0f, 0x0a2e, 0x0a59, 0x0a85, 0x0aa4, 0x0ad0, 0x0af9, 0x0b18, 0x0b37, 0x0b5c, 0x0b83, 
        0x0ba3, 0x0bd0, 0x0c0e, 0x0c2d, 0x0c58, 0x0c80, 0x0c9f, 0x0cde, 0x0d04, 0x0d23, 0x0d4e, 0x0d7a, 0x0d9a, 0x0dbd, 0x0e01, 0x0e40, 0x0e84, 0x0ea3, 0x0ec2, 0x0f00, 
        0x0f49, 0x1000, 0x1050, 0x106f, 0x108e, 0x10c7, 0x10e6, 0x124a, 0x1269, 0x1290, 0x12b8, 0x12d8, 0x1318, 0x1380, 0x13f8, 0x166f, 0x16a0, 0x16f1, 0x1710, 0x1740, 
        0x176e, 0x17d7, 0x1820, 0x1880, 0x18aa, 0x1900, 0x1970, 0x19b0, 0x1a20, 0x1b05, 0x1b83, 0x1bba, 0x1c4d, 0x1c80, 0x1cbd, 0x1cee, 0x1d0d, 0x1e00, 0x1f18, 0x1f48, 
        0x1f67, 0x1fb6, 0x1fd6, 0x1ff6, 0x207f, 0x2102, 0x2124, 0x2145, 0x2183, 0x2c00, 0x2c60, 0x2ceb, 0x2d0a, 0x2d2d, 0x2d6f, 0x2da0, 0x2dc0, 0x2e2f, 0x3005, 0x303b, 
        0x309d, 0x30fc, 0x3131, 0x31a0, 0x3400, 0x4e00, 0xa000, 0xa4d0, 0xa610, 0xa640, 0xa6a0, 0xa717, 0xa78b, 0xa7f5, 0xa814, 0xa882, 0xa8fb, 0xa91a, 0xa960, 0xa9cf, 
        0xa9ee, 0xaa0d, 0xaa44, 0xaa7a, 0xaab1, 0xaadb, 0xab01, 0xab20, 0xab3f, 0xab70, 0xac00, 0xd7b0, 0xf900, 0xfa70, 0xfb00, 0xfb1f, 0xfb3e, 0xfb5d, 0xfbd3, 0xfd50, 
        0xfd92, 0xfe70, 0xff21, 0xff66, 0xffc2, 
    )

    // rangeEnd.size = 165
    internal val rangeEnd = intArrayOf(
        0x1a06007a, 0x7fe08400, 0xe0100f6, 0x02c1, 0xc0e02e4, 0x10102ee, 0x6ba05e6f, 0x130103f5, 0x0481, 0x052f, 0x26020559, 0x294705ea, 0x42d064a, 0x20106d3, 0x43018000, 0x7fa00013, 0x171d07a5, 0x11807ea, 0x7ffff821, 0x40110043, 
        0x1907086a, 0x150108c7, 0x3603093d, 0x1070961, 0x67f87fff, 0x7efffffc, 0x400023c5, 0x40076000, 0x43f00801, 0x7dfffff9, 0x400006db, 0x47000017, 0x7fffeeff, 0x411f6fef, 0x10f0ae1, 0x7e67f800, 0x76feffff, 0x3030b3d, 0x4010001d, 0x4d63dc7e, 
        0x403ffc71, 0x1340c0c, 0x7bfffffb, 0xd030c3d, 0x3050c61, 0x7ffeeff0, 0x63effdff, 0x400c0006, 0x7fffeeff, 0x18020d3d, 0x400700e0, 0x6050d96, 0x18010dbb, 0x1020dc6, 0x30010e33, 0x73a0e82, 0x7fffffbe, 0x7200dffa, 0x5e00000b, 0x13f0f47, 
        0x241b0f8c, 0x2b14103f, 0x60311e1f, 0x2041081, 0x11110c5, 0x7fffff20, 0x15011248, 0x7fe7afe7, 0x2001128d, 0x210112b5, 0x7fff9ebf, 0x39011315, 0x135a, 0x101013f5, 0x603166c, 0x1101169a, 0x16ea, 0x77ffc07f, 0x20e1731, 0x120e176c, 
        0x30f17b3, 0x10417dc, 0x1878, 0x50218a8, 0x10518f5, 0x1f31196d, 0x50b19ab, 0x1a361a16, 0x35521aa7, 0x2f111b4b, 0x1e0d1baf, 0x2c1a1c23, 0x30a1c7d, 0x9071cba, 0x3291cec, 0x7ffe08df, 0x1dbf, 0x1f15, 0x6021f45, 0x7fd57f9f, 
        0x17021fb4, 0x5e3fb8bf, 0x783ffe1f, 0x7742071, 0x110209c, 0x47c5ff90, 0x479ffdea, 0x504214e, 0x2184, 0x2f012c5e, 0x2ce4, 0x7ff000c7, 0x1c012d27, 0x1022d67, 0x1102d96, 0x7fbfbfbf, 0x7fbfbfbf, 0x2e2f, 0x22a3035, 0x2043096, 
        0x30130fa, 0x405312f, 0x318e, 0x203031ff, 0x4dbf, 0x9ffc, 0xa48c, 0x2e02a60c, 0x100aa62b, 0x2f10a69d, 0xa6e5, 0x902a788, 0x3502a7ca, 0x7fdeefff, 0xf1da873, 0x323ea8f7, 0x7fffc006, 0xc0aa946, 0x1d07a9b2, 0x7fdf0000, 
        0x7ffef801, 0x1c17aa42, 0x814aa76, 0x103aaaf, 0x40014f98, 0x41c07ff3, 0x401f9f9f, 0x7fffbfbf, 0x1c01ab69, 0xabe2, 0xd7a3, 0x1704d7fb, 0xfa6d, 0xfad9, 0x507c003f, 0x5f7ffdff, 0x7fffffb6, 0xfbb1, 0xfd3d, 0xfd8f, 
        0x3628fdfb, 0x501fefc, 0x1a06ff5a, 0xffbe, 0x439f9f9f, 
    )
}

/**
 * Returns `true` if this character is a letter.
 */
internal fun Char.isLetterImpl(): Boolean {
    val ch = this.toInt()
    val index = binarySearchRange(Letter.rangeStart, ch)

    val rangeStart = Letter.rangeStart[index]
    val rangeEnd = Letter.rangeEnd[index]

    if (rangeEnd <= 0xffff) {
        return ch <= rangeEnd
    }

    val isGapPattern = rangeEnd <= 0x3fff_ffff
    if (isGapPattern) {
        if (ch > rangeEnd and 0xffff) {
            return false
        }
        val charsBeforeGap = rangeEnd shr 24
        val gapLength = (rangeEnd shr 16) and 0xff
        val chDistance = ch - rangeStart
        return chDistance < charsBeforeGap || chDistance >= charsBeforeGap + gapLength
    }

    // isBitPattern
    if (ch > rangeStart + 30) {
        return false
    }
    val shift = ch - rangeStart - 1
    return (ch == rangeStart) || rangeEnd and (1 shl shift) > 0
}
