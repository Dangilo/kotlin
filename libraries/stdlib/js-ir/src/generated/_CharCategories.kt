/*
 * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package kotlin.text

//
// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateUnicodeData.kt
// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib
//

private class CategoryRangesWrapper {
    companion object {
        private const val toBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
        internal val fromBase64 = IntArray(128).apply { toBase64.forEachIndexed { index, char -> this[char.toInt()] = index } }

        internal val rangeStart = "AAAAIAAjACcAKwAuADAAOgA8AD8AQQBbAF4AYQB7AH4AgQCgAKMApgCqAK0AsACzALYAuAC7AL4AwQDXANoA3wD3APoBAAE4AUkBeQF/AYEBgwGHAYsBjwGSAZgBmwGjAacBqwGvAbMBuAG7Ab4BwAHEAc4B3QHwAfUB+AI0AjoCPAJAAkQCRwJQApQClwKwAsICxgLSAuAC5QLsAvADAANwA3QDdwN6A30DhAOGA4oDjAOOA5ADkwOjA6wDzwPTA9UD2APwA/QD+QP7A/0EMARgBIIEhQSIBIoEwQTPBTEFWQVcBWAFiQWNBY8FkQW+BcEFwwXQBe8F8wYABgYGCQYLBg4GEAYbBh4GIAZABkMGSwZgBmoGbgZwBnMG1AbXBt0G4AblBucG6QbsBu4G8Ab6Bv0G/wcCBw8HEgcwB00HpgexB8AHygfrB/QH9gf5B/0IAAgWCBoIHQgkCCcIKwgwCEAIWQheCGAIoAi2CNMI4gjlCQMJBgk6CT0JQAlDCUkJTQlQCVMJWAliCWQJZglwCXMJgQmFCY8JkwmqCbIJtgm8Cb8JwQnHCcsJzQnXCdwJ3wniCeYJ8AnyCfQJ+gn9CgEKAwoFCg8KEwoqCjIKNQo4CjwKPgpBCkcKSwpRClkKXgpmCnAKcgp1CoEKgwqFCo8KkwqqCrIKtQq8Cr8KwQrHCskKywrNCtAK4AriCuYK8Ar5CvwLAQsFCw8LEwsqCzILNQs8C0ALQwtHC0sLTQtVC1cLXAtfC2ILZgtwC3MLgguFC44LkguZC5wLngujC6gLrgu+C8ALxgvKC80L0AvXC+YL8AvzC/kMAAwDDAYMDgwSDCoMPQxADEMMRgxKDFUMWAxgDGIMZgx3DHoMfwyCDIQMhwyODJIMqgy1DLwMwAzGDMoMzAzVDN4M4AziDOYM8Q0ADQINBA0ODRINOw09DUANQw1GDUoNTQ1UDVcNWg1fDWINZg1wDXkNfA2BDYUNmg2zDb0NwA3KDc8N0g3WDdgN5g3yDfQOAQ4xDjUOPw5CDkYOSQ5PDlIOWg6BDoQOhg6MDqUOpw6xDrUOvQ7ADsYOyA7QDtwPAA8DDwYPEw8XDxsPIA8qDzQPOg8+D0APSQ9xD38Pgg+FD4gPjQ+ZD74Pxg/JD84P0A/VD9kQABArEC0QMRA0EDgQPBA/EEIQShBQEFYQWBBaEF4QYRBkEGgQbhBxEHUQghCGEIkQjRCQEJoQnRCgEMcQzRDQEPsQ/hEAEkoSUBJYEloSYBKKEpASshK4EsASwhLIEtgTEhMYE10TYBNpE4ATkBOgE/gUABQDFm0WcBaAFoMWmxagFusW7hbxFwAXDhcSFyAXMhc1F0AXUhdgF24XcheAF7QXthe5F74XxhfKF9QX1xfaF90X4BfwGAAYBhgJGAsYDhgQGCAYQxhGGIAYhRiHGKkYsBkAGSAZIxknGSkZMBkyGTUZORlAGUQZRhlQGXAZgBmwGdAZ2hneGgAaFxoZGhsaHhogGlUaWRpgGmQaZxptGnMafxqCGpAaoBqnGqoasBq+GwAbBBsHGzQbOBs7Gz8bQhtFG1AbWhthG2sbdBuAG4IbhRuhG6QbphuoG6obrRuwG7ob5hvrG+0b8Rv8HAAcJBwsHDQcNhw7HEAcTRxQHFoceBx+HIAckBy9HMAc0BzTHNYc4RzkHOkc7RzwHPQc9xz6HQAdLB1rHXgdex2bHcAd+x4AHpYenh8AHwgfEB8YHyAfKB8wHzgfQB9IH1AfWR9bH10fXx9iH2gfcB+AH4gfkB+YH6AfqB+wH7YfuB+8H78fwh/GH8gfzB/PH9If1h/YH90f4B/oH+0f8h/2H/gf/CAAIAsgECAWIBggHCAgICggKyAvIDIgOSA8ID8gQSBEIEcgUiBVIF8gYiBmIHAgdCB6IH0ggCCKII0gkCCgINAg3SDhIOQg5yEAIQIhBSEHIQohDSERIRMhFiEYIRshHiEkISshLiExITQhNyE5IT0hQCFFIUghSiFOIVEhYCGDIYYhiSGQIZUhmiGcIaAhqSGuIbEhziHQIdIh1iH0IwAjCCMMIyAjIiMpIywjfCN/I5sjtCPcI+IkQCRgJJwk6iUAJbcluiXBJcQl+CYAJm8mcidoJ3YnlCfAJ8UnyCfmJ/AoACkAKYMpmSnYKdwp/Cn/KwArMCtFK0crTSt2K5csACwwLGAsZCxpLG4scSx4LHwsfiyBLOQs5yzrLO8s8iz5LP0tAC0nLS0tMC1vLX8tgi2gLagtsC24LcAtyC3QLdgt4C4ALgIuBi4JLg8uFy4cLh8uIi4qLi8uMi46LjwuQC5DLlAuUi6ALpsvAC/wMAAwAzAGMAkwEjAUMBwwHzAiMCowLjAwMDMwNjA4MDswPjBBMJkwmzCdMJ8wozD7MP4xBTExMZAxkjGWMaAxwDHwMgAyIDIqMkgyUDJTMmAygDKKMrEywDQATcBOAKAAoBWgGKSQpNCk+KT+pQCmDKYPphKmIKYqpkCmbqZxpnOmdqZ+poGmnKaepqCm5qbwpvKnAKcXpyCnIqcwpzKncKdzp3mnfqeIp4unj6eSp5Wnq6evp7KntafCp8anyKf1p/in+qf9qAKoBagJqAuoDqgjqCWoJ6gqqCyoMKg2qDioQKh0qICogqi0qMSozqjQqOCo8qj4qPuo/6kCqQqpJqkuqTCpR6lSqV+pYqmAqYOphqmzqbepuqm8qb6pwanPqdKp3qngqeWp6KnwqfqqAKopqi+qMaozqjWqQKpDqkaqTKpQqlyqYKpwqnOqd6p6qn2qgKqwqrSquKq7qr6qwKrbqt2q4Krrqu+q8qr1qwGrCasRqyCrKKswq1urXqtgq2mrcKvAq+Or5avrq/CsANew18vYANuA3ADgAPkA+nD7APsT+x37Ifsp+yz7OPs++0D7Q/tG+7L70/0+/VD9kv3w/fz+AP4Q/hf+IP4w/jP+Nf5F/kf+Sv5N/lD+VP5Y/lv+X/5i/mb+aP5w/nb+//8B/wT/B/8L/w7/EP8a/xz/H/8h/zv/Pv9B/1v/Xv9h/2X/aP9w/3P/nv+g/8L/yv/S/9r/4P/i/+X/6P/r/+3/+f/8"

        internal val rangeEnd = "AB8AIgAmACoALQAvADkAOwA+AEAAWgBdAGAAegB9AIAAnwCiAKUAqQCsAK8AsgC1ALcAugC9AMAA1gDZAN4A9gD5AP8BNwFIAXgBfgGAAYIBhgGKAY4BkQGXAZoBogGmAaoBrgGyAbcBugG9Ab8BwwHNAdwB7wH0AfcCMwI5AjsCPwJDAkYCTwKTApYCrwLBAsUC0QLfAuQC6wLvAv8DbwNzA3YDdwN8A38DhQOJA4oDjAOPA5IDoQOrA84D0gPUA9cD7wPzA/gD+gP8BC8EXwSBBIQEhwSJBMAEzgUvBVYFWwVfBYgFigWOBY8FvQXABcIFxwXqBfIF9AYFBggGCgYNBg8GGgYcBh8GPwZCBkoGXwZpBm0GbwZyBtMG1gbcBt8G5AbmBugG6wbtBu8G+Qb8Bv4HAQcNBxEHLwdKB6UHsAexB8kH6gfzB/UH+Af6B/8IFQgZCBwIIwgmCCoILQg+CFgIWwheCGoItAjHCOEI5AkCCQUJOQk8CT8JQglICUwJTwlSCVcJYQljCWUJbwlyCYAJgwmMCZAJqAmwCbIJuQm+CcAJxAnICcwJzgnXCd0J4QnjCe8J8QnzCfkJ/An+CgIKAwoKChAKKAowCjMKNgo5CjwKQApCCkgKTQpRClwKXgpvCnEKdAp2CoIKgwqNCpEKqAqwCrMKuQq+CsAKxQrICskKzArNCtAK4QrjCu8K8Qr7Cv8LAwsMCxALKAswCzMLOQs/C0ILRAtIC0wLTQtWC1cLXQthC2MLbwtyC3cLgwuKC5ALlQuaC5wLnwukC6oLuQu/C8ILyAvMC80L0AvXC+8L8gv4C/oMAgwFDAwMEAwoDDkMPwxCDEQMSAxNDFYMWgxhDGMMbwx5DH4MgQyDDIYMjAyQDKgMswy5DL8MxAzIDMsMzQzWDN4M4QzjDO8M8g0BDQMNDA0QDToNPA0/DUINRA1IDUwNTw1WDVkNXg1hDWMNbw14DXsNfw2DDZYNsQ27Db0Nxg3KDdEN1A3WDd8N7w3zDfQOMA40DjoOQQ5FDkgOTg5RDlkOWw6CDoQOig6jDqUOsA60DrwOvQ7EDsYOzQ7ZDt8PAg8FDxIPFg8aDx8PKQ8zDzkPPQ8/D0cPbA9+D4EPhA+HD4wPlw+8D8UPyA/MD88P1A/YD9oQKhAsEDAQMxA3EDsQPhBBEEkQTxBVEFcQWRBdEGAQYxBnEG0QcBB0EIEQhRCIEIwQjxCZEJwQnxDFEMcQzRD6EP0Q/xJIEk0SVhJYEl0SiBKNErAStRK+EsASxRLWExATFRNaE18TaBN8E48TmRP1E/0UAhZsFm8WfxaCFpoWnBbqFu0W8Bb4FwwXERcUFzEXNBc2F1EXUxdsF3AXcxezF7UXuBe9F8UXyRfTF9YX2RfcF90X6Rf5GAUYCBgKGA0YDhgZGEIYRRh4GIQYhhioGKoY9RkeGSIZJhkoGSsZMRk0GTgZOxlAGUUZTxltGXQZqxnJGdkZ2hn/GhYaGBoaGhsaHxpUGlgaXhpjGmYabBpyGnwagRqJGpkaphqpGq0avRrAGwMbBhszGzcbOhs+G0EbRBtLG1kbYBtqG3MbfBuBG4QboBujG6UbpxupG6wbrxu5G+Ub6hvsG/Ab8xv/HCMcKxwzHDUcNxw/HEkcTxxZHHccfRx/HIgcuhy/HMcc0hzVHOAc4xzoHOwc7xzzHPYc+Rz6HSsdah13HXodmh2/Hfkd/x6VHp0e/x8HHw8fFR8dHycfLx83Hz8fRR9NH1cfWR9bH10fYR9nH28ffR+HH48flx+fH6cfrx+0H7cfux++H8EfxB/HH8sfzh/RH9Mf1x/bH98f5x/sH+8f9B/3H/sf/iAKIA8gFSAXIBsgHyAnICogLiAxIDggOyA+IEAgQyBGIFEgVCBeIGEgZCBvIHEgeSB8IH8giSCMII4gnCC/INwg4CDjIOYg8CEBIQQhBiEJIQwhECESIRUhFyEaIR0hIyEqIS0hMCEzITYhOCE8IT8hRCFHIUkhTSFQIV8hgiGFIYghiyGUIZkhmyGfIaghrSGwIc0hzyHRIdUh8yL/IwcjCyMfIyEjKCMrI3sjfiOaI7Mj2yPhJCYkSiSbJOkk/yW2JbklwCXDJfcl/yZuJnEnZyd1J5MnvyfEJ8cn5SfvJ/8o/ymCKZgp1ynbKfsp/ir/Ky8rRCtGK0wrcyuVK/8sLixeLGMsaCxtLHAsdyx7LH0sgCzjLOYs6izuLPEs8yz8LP8tJS0nLS0tZy1wLYEtli2mLa4tti2+LcYtzi3WLd4t/y4BLgUuCC4OLhYuGy4eLiEuKS4uLjEuOS47Lj8uQi5PLlEuUi6ZLvMv1S/7MAIwBTAIMBEwEzAbMB4wITApMC0wLzAyMDUwNzA6MD0wPzCWMJownDCeMKIw+jD9MP8xLzGOMZExlTGfMb8x4zH/Mh4yKTJHMk8yUjJfMn8yiTKwMr8z/02/Tf+f/KAUoBekjKTGpPek/aT/pgumDqYRph+mKaYrpm2mcKZypnWmfaaAppumnaafpuWm76bxpvenFqcfpyGnL6cxp2+ncqd4p32nh6eKp46nkaeUp6qnrqexp7Snv6fFp8enyqf3p/mn/KgBqASoCKgKqA2oIqgkqCaoKagrqCyoNag3qDmoc6h3qIGos6jDqMWoz6jZqPGo96j6qP6pAakJqSWpLakvqUapUalTqWGpfKmCqYWpsqm2qbmpu6m9qcCpzanRqdmp36nkqeep76n5qf6qKKouqjCqMqo0qjaqQqpFqkuqTapZql+qb6pyqnaqeap8qn+qr6qzqrequqq9qr+qwqrcqt+q6qruqvGq9Kr2qwarDqsWqyarLqtaq12rX6toq2urv6viq+Sr6qvtq/nXo9fG1/vbf9v/3//4//pt+tn7BvsX+yD7KPsr+zb7PPs++0H7RPux+8H9Pf0//Y/9x/37/f3+D/4W/hn+L/4y/jT+RP5G/kn+TP5P/lL+V/5a/l7+Yf5l/mb+a/50/vz+//8D/wb/Cv8N/w//Gf8b/x7/IP86/z3/QP9a/13/YP9k/2f/b/9y/53/n/++/8f/z//X/9z/4f/k/+b/6v/s/+7/+//9"

        internal val categoryOfRange = "AA8zGGMaWrhjNAAYAAkAGAAZABgAAWK2AvsAAls1PfkAD2GaABpjmxc9Q3xxeSxbABgvZS/LYWEAAWQhAAEAAgsiAAIAQQAiAEEAIgACAAEAQQghBEIAAQQiCEEEIgBBACIAQQQiACIEQhRBAAIABQRDACIAQQRDBCIAQQACAAEIIQAiAAEAQQACCEUAAgAEABsABAAbAAQAGwNkABsABgBBEDsAAhBCCDgAGwQ4AAEAAQABBCIAAQABAAIIQQABAAIAQQACCDkAAQACAAEAAgBBcMYABgAHAEEAIgBBAAFgmAAYAAIDFAAcABoABmDUAAZgxgAFAAUAGAAQABkAGGsYABwABgMQABgABRSFAAUABgAJABgABRTFAAVgxQAGQNwABgAEAAZwxgAGAAUACQAFABxjBQAYFgYABQAGAAUABgAFAAkABQAGAARjmAMEG1oABQAGGIYABhDGGMQABgAYAAUABgAYAAUABQAFAAYY0AAGFKgABQEGIKgZBgAGAAgZCBTGAAYABQAGABgACRMFAAUhBgAFAAUABQAFAAUABRkFAAgABgAIAAgAxQAIAAUABQAGAAkABQAaAAtrhQMGAAYACAAFAAUABQAFAAUABQAFAAYACAAGAAYABgAGAAUABQAJAAYABQDYAAYACAAFAAUABQAFAAUABSCmAAgABgAGAAgACAAGAAUABQAGAAkDWBimAAYhBgAFAAUABQAFAAUABRkFGMgABgAIAAgABgAGAAgABQAFAAYACSy8AAsApgAFAAUABQAFAAUABQAFAAUABQAIGQgACAAIAAYABQAIAAkACwAcA1whBhTIAAUABQAFAAUYpiDIAAgABgAGAAYABQAFAAYACWFrAAsXhgAIFLgABQAFAAUABQAFGQUACCEGAAgABgAIAAUABQAGAAkABQAGAAgABQAFAAUABhUIIMYABgAIAAhwpgAFLQsACwAFAAYACQALcKUABSDIAAUABQAFAAUABQAGAAgABgAGAAgACQAIABgABRSmAAZopQAFGMQABiU4AAkAGAAFAAUABQAFAAUABRilAAYABQAFAAQABgAJAAVzhWMcABhjnHDGABwACQALANwC1QAIAAUABQAGGQYABhsGAAUABgAGABxzhgAcABwAGAAcABgABQAIAAYgxgAGGMgZBiSpAAkAGAAFAAgABgAFAAYVCCClAAgABQAGAAUZCCEGAAgUyAAJAAgbnAABAAEAAQACCJgAAgAFAAUABQAFAAUABQAFAAUABQAFAAUABQAFAAUABQAFAAYAGAALAAUAHAABAAJQpQAFcLgABRSsAAUCtgAFABgACgAFAAUABQAGAAUABgAYAAUABgAFAAUABgAFAAYZBgAGAAgZCAAGABhgmGsFAAYACQALABhjFAAYAAYAEAAJAAUUhQAFAAUABgAFAMUABQAFAAYACAAGAAgACCEGAAgABgAcABgACQAFAAUABQAFAAkACwAcAAUABgAIAAYAGAAFAQYABgEGGMgABgAIAAYlJgAJAAkAGGCYABgABhjHAAYVBQAFIMYABiEGAAghBgAFAAkAGAAcAAYAHAAGFQUABSDGAAYACAAGIMYYpQAJAAUYyAAIGQYgyAAYAAUACAAGAAgABgAYAAkABQAJAAUABAAYAAIAAQABABgABmDGAAYZBgAGAAUUxQAFGKUgxgAFAAIABAACEEIAAgAEAAYABgBBAAIAQQACAAEAAgABAAIAAQACAAEAAgABAAIAAQABAAEIQQACAAEAAgACAAMAAgADAAIAAwACAAIAAQtjABsAAgACAAFsewtiAAIAAgABABsAAgABABsAAgACAAFsewAMABAAFAAYdr5X3QAYQc0AEGGYABh3HgAYABcAGFc2ABhfGQAYQZAAEAAQAIsACwAZWqQACwAZArYABAAaAAYABxjnHMYABgAcB5wAHHA8BEEIIgABcEEAHAQ5AAEAHAOBAAELgQABFEUABXOCBEEAGQhBAAJzmS+CAAsACgVCAAovnAAZABwAGQAcczwAHHOZABwAGQAcA5kAHAAZABwC1QAcABkAHFq8ABxzmQAcABkAHAAZABwAHAALABwACwAcczwAHGecABwAGQAcZ5wAHALVAAsAHAAZVzYAGQLVABkAHAAZArYAGQLVABlXNgAZABwAGQAcABkAHAAcABwAAQACBCIIQQAiAAEEQgACAAQAAQBBC5wAHAAiAAYAQQAYYwsAAgACAAIABQCYFMUABQAFAAUABQAFAAUABQAFAAUABgAYA90AGHu4ABhjFHceY90C1QAYYwQAGAAUABhSuAAYABwAGAAcABwAHAAcYwwTmFVFAtUAHALVVpZyygAKAAYACBCUAAQAHAAKEwUAHAAFAAYAGwAEFoUABWCEAKQABQAFABwACwAcAAUAHAAFABwACwAcAAsviwALABwACwAcAAsAHAAFABwABQAFFIUABQAcAAUABAAYAAVgmBcFAAUACQAFAEEcxQAHYMYABhMBAEEABAAGAAUACgAGABgAGwAEABsAQQACAEEIRAACACIAQW9kACIEoggiAEEAAQQiAAEAQQghAAEAIgglAAQUogAFGKUUpgAFGKUABQAIAAZziAAcAAYACwAcA5oABQAYAAgABQAIAAYAGAAJAAYABQAYFLglJgAJAAUABgAYAAUABgAIFLgABQAGFKgABSEGAAYACAAGAAgAGCSJAAkAGAAFGKQABQAJAAUABQAGAAgABgAIAAYABRSmAAUBBgAJABgABRSkAAUAHCCmFQUABRTGGKUUpgAFAAYAxQAFYJgABRjIYRgQpAEGAAUABQAFAAUABQACE2QABAACb2QAAgAFAAggyCMGAAkABQAFAAUAEwATABMAEgAFAAUAAgACGKUABRclAAUABQAFAAUABQAFABsABQK2AAUABQAFA5oABgAYWrgABmKUABcCtgAYWrgAGAAXABgAGFq0ArYAGFM5ABlrGAAFAAUAEAAYY1hXFmaYABgACQAYABkAGAABVtgC+wACZrZXNlcWYKUABRSFAAUABAAFAAUABQAFAAUAGm88ABpnmQAZABwAEAAc"
    }
}

private fun binarySearchRange(rangeStart: String, needle: Int): Int {
    var bottom = 0
    var top = 1158 - 1
    var middle = -1
    var value = 0
    while (bottom <= top) {
        middle = (bottom + top) / 2
        value = intFromBase64(rangeStart, middle)
        if (needle > value)
            bottom = middle + 1
        else if (needle == value)
            return middle
        else
            top = middle - 1
    }
    return middle - (if (needle < value) 1 else 0)
}

private fun intFromBase64(string: String, index: Int): Int {
    val fromBase64 = CategoryRangesWrapper.fromBase64
    val stringIndex = (index / 3) * 8
    return when (index % 3) {
        0 -> (fromBase64[string[stringIndex].toInt()] shl 10) or
                (fromBase64[string[stringIndex + 1].toInt()] shl 4) or
                (fromBase64[string[stringIndex + 2].toInt()] shr 2)

        1 -> ((fromBase64[string[stringIndex + 2].toInt()] and 0b11) shl 14) or
                (fromBase64[string[stringIndex + 3].toInt()] shl 8) or
                (fromBase64[string[stringIndex + 4].toInt()] shl 2) or
                (fromBase64[string[stringIndex + 5].toInt()] shr 4)

        2 -> ((fromBase64[string[stringIndex + 5].toInt()] and 0b1111) shl 12) or
                (fromBase64[string[stringIndex + 6].toInt()] shl 6) or
                (fromBase64[string[stringIndex + 7].toInt()])

        else -> error("Unreachable")
    }
}

/**
 * Returns the Unicode general category of this character as an Int.
 */
internal fun Char.getCategoryValue(): Int {
    val ch = this.toInt()
    val index = binarySearchRange(CategoryRangesWrapper.rangeStart, ch)
    val high = intFromBase64(CategoryRangesWrapper.rangeEnd, index)
    if (ch <= high) {
        val code = intFromBase64(CategoryRangesWrapper.categoryOfRange, index)
        if (code < 0x20) {
            return code
        }
        if (code < 0x400) {
            return if ((ch and 1) == 1) code shr 5 else code and 0x1f
        }
        return when (ch % 3) {
            2 -> code shr 10
            1 -> (code shr 5) and 0x1f
            else -> code and 0x1f
        }
    }
    return CharCategory.UNASSIGNED.value
}
