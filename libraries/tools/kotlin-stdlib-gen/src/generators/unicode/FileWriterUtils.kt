/*
 * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package generators.unicode

import templates.COPYRIGHT_NOTICE
import templates.autoGeneratedWarning
import java.io.File
import java.io.FileWriter

internal fun FileWriter.writeHeader(file: File, pkg: String) {
    println("Generating file: $file")
    appendLine(COPYRIGHT_NOTICE)
    appendLine("package $pkg")
    appendLine()
    appendLine(autoGeneratedWarning("GenerateUnicodeData.kt"))
}

internal fun FileWriter.writeIntArray(
    name: String,
    elements: List<Int>,
    strategy: RangesWritingStrategy
) {
    fun appendWithIndentation(string: String) {
        append(strategy.indentation + string)
    }

    appendWithIndentation("${strategy.rangesVisibilityModifier} val $name = intArrayOf(")
    for (i in elements.indices) {
        if (i % 20 == 0) {
            appendLine()
            appendWithIndentation("    ")
        }
        append(elements[i].hex() + ", ")
    }
    appendLine()
    appendWithIndentation(")")
    appendLine()
}

internal fun FileWriter.writeIntsInBase64(
    name: String,
    elements: List<Int>,
    strategy: RangesWritingStrategy
) {
    val bytes = elements.flatMap { listOf((it shr 8).toByte(), it.toByte()) }.toByteArray()
    val base64String = java.util.Base64.getEncoder().encodeToString(bytes)

    appendLine("${strategy.indentation}${strategy.rangesVisibilityModifier} val $name = \"$base64String\"")
}

internal fun Int.hex(): String {
    val result = toString(radix = 16)
    if (result.first() == '-') {
        return "-0x" + result.substring(startIndex = 1).padStart(4, '0')
    }
    return "0x" + result.padStart(4, '0')
}